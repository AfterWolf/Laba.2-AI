import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score


np.random.seed(42)
X = np.random.rand(1000, 1) * 10
y = np.cos(X).ravel() + np.random.normal(0, 0.2, 1000)
plt.figure(figsize=(10, 5))
plt.scatter(X, y, color='green', label='Згенеровані дані')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Згенеровані дані з шумом (до стандартизації)')
plt.legend()
plt.show()


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

plt.figure(figsize=(10, 5))
plt.scatter(X_train, y_train, color='blue', label='Навчальна вибірка', alpha=0.6)
plt.scatter(X_test, y_test, color='orange', label='Тестова вибірка', alpha=0.6)
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.title('Навчальна і тестова вибірки')
plt.show()


errors = []
r2_scores = []
k_values = range(1, 21)
for k in k_values:
    knn = KNeighborsRegressor(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)


    error = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    errors.append(error)
    r2_scores.append(r2)


optimal_k = k_values[np.argmin(errors)]
print(f"Найкраще значення K: {optimal_k}")


plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(k_values, errors, marker='o', color='red')
plt.xlabel('K')
plt.ylabel('Mean Squared Error')
plt.title('Залежність MSE від кількості сусідів')


plt.subplot(1, 2, 2)
plt.plot(k_values, r2_scores, marker='o', color='green')
plt.xlabel('K')
plt.ylabel('R2 Score')
plt.title('Залежність R2 Score від кількості сусідів')

plt.tight_layout()
plt.show()


knn_optimal = KNeighborsRegressor(n_neighbors=optimal_k)
knn_optimal.fit(X_train, y_train)
y_pred_optimal = knn_optimal.predict(X_test)


plt.figure(figsize=(10, 5))
plt.scatter(X_test, y_test, color='blue', label='Фактичні значення')
plt.scatter(X_test, y_pred_optimal, color='red', label='Прогнозовані значення')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.title(f'Прогноз KNN-регресора з K={optimal_k}')
plt.show()


mse_optimal = mean_squared_error(y_test, y_pred_optimal)
r2_optimal = r2_score(y_test, y_pred_optimal)
print(f"Mean Squared Error для оптимального K: {mse_optimal}")
print(f"R2 Score для оптимального K: {r2_optimal}")
